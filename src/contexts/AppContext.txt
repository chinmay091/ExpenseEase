*** Important AppContext.tsx code

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from 'react';
import moment, { Moment } from 'moment';
import Toast from 'react-native-toast-message';
import LoadingModal from '../components/LoadingModal';
import { Account, Investment, Transaction } from '../services/pluggy/types';
import plaidApi from '../services/pluggy/apiAdapter';

export type AppContextValue = {
  isLoading: boolean;
  isAuthenticated: boolean; // ✅ Add this
  hideValues: boolean;
  setHideValues: (value: boolean) => void;
  date: Moment;
  setDate: (value: Moment) => void;
  accounts: Account[];
  transactions: Transaction[];
  investments: Investment[];
  fetchAccounts: () => Promise<void>;
  fetchTransactions: () => Promise<void>;
  fetchInvestments: () => Promise<void>;
  setIsAuthenticated: (value: boolean) => void; // ✅ Add this
};

const AppContext = createContext({} as AppContextValue);

export const AppContextProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [hideValues, setHideValues] = useState(false);
  const [date, setDate] = useState(moment());

  const [accounts, setAccounts] = useState<Account[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [investments, setInvestments] = useState<Investment[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    fetchFinancialData();
  }, []);

  const fetchFinancialData = async () => {
    setIsLoading(true);
    await Promise.all([
      fetchAccounts(),
      fetchTransactions(),
      fetchInvestments(),
    ]);
    setIsLoading(false);
  };

  const fetchAccounts = async () => {
    try {
      const data = await plaidApi.fetchAccounts();
      setAccounts(data);
    } catch (error) {
      Toast.show({ type: 'error', text1: 'Error fetching accounts' });
    }
  };

  const fetchTransactions = async () => {
    try {
      const data = await plaidApi.fetchTransactions();
      setTransactions(data);
    } catch (error) {
      Toast.show({ type: 'error', text1: 'Error fetching transactions' });
    }
  };

  // const fetchTransactions = async () => {
  //   const response = await fetch('http://10.0.2.2:8000/api/transactions/', {
  //     headers: {
  //       Authorization: '0e01e42ffb63c1bb1814cf470aabe69aae73a467',
  //     },
  //   });
  //   const data = await response.json();
  //   console.log(data);
  // };

  const fetchInvestments = async () => {
    try {
      const data = await plaidApi.fetchInvestments();
      setInvestments(data);
    } catch (error) {
      Toast.show({ type: 'error', text1: 'Error fetching investments' });
    }
  };

  return (
    <AppContext.Provider
      value={{
        isLoading,
        hideValues,
        setHideValues,
        date,
        setDate,
        accounts,
        transactions,
        investments,
        fetchAccounts,
        fetchTransactions,
        fetchInvestments,
      }}
    >
      {children}
      {isLoading ? <LoadingModal text="Loading financial data..." /> : null}
    </AppContext.Provider>
  );
};

export const useAppContext = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within an AppContextProvider');
  }
  return context;
};
